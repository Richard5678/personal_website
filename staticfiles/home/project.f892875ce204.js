function changeLangProj(proj, type) {
    changeLangNav(type);
    changeLangProjSec(type);
    var contents = document.getElementsByClassName('project_content');
    for (i = 0; i < contents.length; i++) {
        contents[i].innerHTML = algo_content[proj][type]["content"][i];
        console.log(algo_content[proj][type]["content"][i]);
    }
    document.getElementById('img').src = algo_content[proj]["img"];

    var impl = document.getElementById('project_impl');
    impl.innerHTML = algo_content[proj][type]["implementation"];
}

var algo_content = {
    "website": {
        "en": {
            "content": ["Personal Website built using HTML, CSS, Javascript, Python, and Django.", 
            "If you are reading this now, " 
            + "you have probably already navigated through many of the sections of my personal website."
            + "<p>I will demonstrate some of the features below:</p>"
            + "<div style=\"text-align: center; \">"
            + "     <img style=\"width: 50%; border: 2px solid white\" src=\"/static/home/website1.png\">"
            + "</div>"
            + "<ol>"
            + "     <li style=\"margin-top:60px;\">On the top left corner of the website, you can change the language of displyed to either Chinese or English.</li>"
            + "     <li style=\"margin-top:60px;\">On the bottom left corder of the about page as shown above, there is a list medias I use. "
            + "         If you move your cursor on to them, a small message window with the name of the media will be displayed like below:"
            + "     <div style=\"text-align: center; \">"
            + "         <img style=\"width: 50%; border: 2px solid white\" src=\"/static/home/website2.png\">"
            + "     </div>"
            + "     </li>"
            + "     <li style=\"margin-top:60px;\">On the top right corner of the website, there are three sections: About, Blog, and Project."
            + "         The about section contains a self-introduction and a list of contacts. The blog section has blogs I wrote (See first post for details)."
            + "         The project section includes some of the projects I have done. For each project, outline, demo and implementation destails are provided."
            + "     </li>"
            + "</ol>"],
            "implementation": "See <a href='https://github.com/Richard5678/personal_website'>github</a> for details."
        },
        "zh": {
            "content": ["用HTML, CSS, Javascript, Python 和 Django。", 
            "如果你正在阅读这段文字，那你应该已经浏览了这个网站的很多页面。 " 
            + "<p>我会用以下空间展示一些主要的特色：</p>"
            + "<div style=\"text-align: center; \">"
            + "     <img style=\"width: 50%; border: 2px solid white\" src=\"/static/home/website1.png\">"
            + "</div>"
            + "<ol>"
            + "     <li style=\"margin-top:60px;\">在网站的左上角，用户可以将网站的语言切换为中文或英文。</li>"
            + "     <li style=\"margin-top:60px;\">在\"关于\"页面的左下角，有一排我用的网络媒体。 "
            + "         如果你把鼠标放在其中一个图标上, 一个小的消息窗口会蹦出来并且显示了这个媒体的名字。"
            + "     <div style=\"text-align: center; \">"
            + "         <img style=\"width: 50%; border: 2px solid white\" src=\"/static/home/website2.png\">"
            + "     </div>"
            + "     </li>"
            + "     <li style=\"margin-top:60px;\">"
            + "         在网站的左上角用三个分区：\"关于\", \"博客\", 以及\"项目\"。"
            + "         \"关于\"界面包含了一段自我介绍以及一排我所用的互联网媒体。\"博客\"界面包括了所有我写的博客。（详情见\"第一个博客\"）。"
            + "         项目界面包含了我做过的一些项目。每个小项目页面都包括项目概述，展示，以及其的软件实现。"
            + "     </li>"
            + "</ol>"],
            "implementation": "详情见<a href='https://github.com/Richard5678/personal_website'>github</a>。"
        },
        "img": "/static/home/website.png"
    },
    "ctor": {
        "en": {
            "content": ["This is a final project for CS246 at the University of Waterloo."
                        + "<br>"
                        + "<h3 style=\"margin-top: 20px;\">Setup</h3>"
                        + "<hr>"
                        + "This game is played on a board displayed below:"
                        + "<br>"
                        + "<div id=\"ctor_hor\" style=\"display: flex\">"
                        + "    <img style=\"position: relative; width:400px;  height: 30%; \" src=\"/static/home/ctorBoard.png\">"
                        + "    <p style=\"padding: 3%;\">Each small recentagle on the board is called a tile and a board is consists of 19 such tiles."
                        + "    Inside each tile, there are three values: the index of the tile, the resource of that tile, and the tile values "
                        + "    which is used to determine if the resource on the tile is awarded when the dices are rolled. (From up to bottom)."
                        + "    <br style=\"margin-top: 10px;\"></br>"
                        + "    On the edges and vertices of each tile are houses and roads which players can build on. "
                        + "        To be specific, each tile has 6 vertices, represented with number surrounded by a bracket. "
                        + "        Each tile has 6 edges, represented with just number. "
                        + "    </p>"
                        + "</div>"
                        + "<p>"
                        + "    Players can build residence on vertices or build roads on edges during their turns."
                        + "    Each residence is built in this order: basement, house, tower. Each player must start by building"
                        + "    a basement and then upgrade in that order if that player has enough resources."

                        + "</p>"
                        + "<p>"
                        + "    This game is played with 4 players who switch turns. At the start of each turn, two dice are throwed and "
                        + "    their sum will be in the range of 2 - 12. If there are tiles with that tile value (at the bottom of each tile), "
                        + "    then resources of those tiles are awarded to players who own a residence on the vertices of those tiles."
                        + "</p>"

                        + "<h3 style=\"margin-top: 20px;\">Geese</h3>"
                        + "<hr>"
                        + "The Geese will start the gaming resting in the Park. When 7 is rolled, the current player can move the geese to anywhere on the board."
                        + "Also note that any player with more than 10 resources will automatically lose half of them (rounded down) at random."
                        + "In addition, the current player can steal a resource from a player who owns a residence on the tile that the geese has been moved to."


                        + "<h3 style=\"margin-top: 20px;\">Building Residences / Roads</h3>"
                        + "<hr>"
                        + "<p>"
                        + "    There are five types of resources: Brick, Energy, Glass, Heat, and Wifi. "
                        + "    Here is a list of resources needed to build the following items:"
                        + "</p>"
                        + "<ol class=\"ul-style indent_list\">"
                        + "    <li>Basement: 1 Brick, 1 Energy, 1 Glass, 1 Wifi</li>"
                        + "    <li>House: 2 Glass, 3 Heat</li>"
                        + "    <li>Tower: 3 Brick, 2 Energy, 2 Glass, 1 Wifi, 2 Heat</li>"
                        + "    <li>Road: 1 Heat, 1 Wifi</li>"
                        + "</ol>"
                        + "There are also some rules regarding where a player can build residences and roads:"
                        + "<ol class=\"indent_list\">"
                        + "    <li>A residence cannot be built on a vertex adjacent to a residence.</li>"
                        + "    <li>Beside the beginning of the game, a residence have to be built on a vertex that has an adjacent road owned by that player.</li>"
                        + "    <li>A road can be built on any edges that has an adjacent road or residence owned by that player.</li>"
                        + "    <li>At the start of the game, each player can choose to build two basements anywhere on the board.</li>"
                        + "</ol>"
                        + "<h3 style=\"margin-top: 20px;\">How to Win?</h3>"
                        + "<hr>"
                        + "The player who first get 10 building points win. Building a basement gets 1 building point and each upgrade get 1 additional point."
                        + "So to win the game, a player have to build more residences since they not only gives building points but they also allow them to get more resources when dices are rolled each turn."
                        + "<br>",

                        "<ol>"
                        + "    <li>	Setup:"
                        + "        When the program is run without any command line argument, it initialize the board according to layout.txt in the current directory: "
                        + "        <br>"
                        + "        You can use the command line argument \"-board file\" to inialize the board. (\"file\" should have the same format as layout.txt)"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\" width:100%;\" src=\"/static/home/ctor1.png\">"
                        + "    </div>"
                        + "    <p>As you can see layout.txt contains 38 numbers and each pair of number represents the state of a tile in the order of tiles on the board. (First number represents resource and second is the value) </p>"
                        + "    <p>Note that we have the following correspondence bewteen resources and number: 0:Brick, 1:Energy, 2:Glass, 3:Heat, 4:Wifi, 5: Park </p>"
                        + "    <p>The layout.txt initializes board below:</p>"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"align-items: center; width:50%;  height: 30%;\" src=\"/static/home/ctorBoard.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li> At the beginning of the game, each player is prompted to build 2 residences anywhere on the board. You can also see that if a residence has already been built on a vertex by another user, then other users cannot build on it."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor2.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li> At the start of each player's turn, the player is prompted to enter which dice to use."
                        + "        There are two options: load dice or fair dice. Fair dice returns a number randomly bewteen 2-12 while load dice asks you to enter a number in that range:"
                        + "    "
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor3.png\">"
                        + "    </div>"
                        + "    The status command shows the points and resources each player have. When you enter the dice you want to roll, the program will take the last kind of dice you entered."
                        + "    Here is a desmontration:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor4.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li>Demonstration of command “help”, “residences”, “improve” and rolling a fair dice:"
                        + "    Command \"help\" prints all the commands accepted by the program, “residences” prints all the residences built by the current player."
                        + "    \"improve\" upgrades the residence."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor5.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li>	Using the command line argument of “-random-board”. The board is randomly initialized to have 3 WIFI, 3 HEAT, 4 BRICK, 4 ENERGY, 4 GLASS, and 1 PARK"
                        + "    Command:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor6.png\">"
                        + "    </div>"
                        + "    Board:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor7.png\">"
                        + "    </div>"
                        + "     </li>"
                        + "    <li>When the dice rolls 3, observe that Tile 0 is the only tile with a tile value of 3. So all the builders who own vertices on tile 0 will be given one unit of BRICK as "
                        + "        it is the resource of Tile 0. The “status” command shows all the resources and builder-points owned by each player and you can see that Blue gained 2 bricks and Orange and Yellow both gained 1 brick. "
                        + "        From the board above we see that Blue owns two vertices in Tile 0 and Yellow, Orange each owns one vertices in Tile 0."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor8.png\">"
                        + "    </div>   "
                        + "     </li>"

                        + "    <li>The effect of geese: "
                        + "    The status of each builder before 7 is rolled:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor9.png\">"
                        + "    </div>   "
                        + "    In the next turn when 7 is rolled, Blue loses 6 of its 13 total resources "
                        + "    and Red loses 6 of its 12 total resources. Then geese is moved to Tile 0 for which Blue, Orange, Yellow owns vertices. "
                        + "    So Red can choose to steal a resource from one of them as all three has at least one resource. As you can see, Red steals a Brick from Blue. "
                        + "    Comparing to the first pic, Blue had 5 bricks before the turn and lost one due to geese and lost another one to Red. "
                        + "    On the other hand, Red gained a brick compared to before the turn."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor10.png\">"
                        + "    </div>  "
                        + "     </li>"


                        + "    <li>Command \"build-road\" and \"build-res\": When we build the road at 14, it is successful because Blue already owns a residence that is adjacent to edge 14. "
                        + "        After that when we try to build a basement on vertex 14, although Blue owns a road adjacent to vertex 14, "
                        + "        it fails because we cannot build residences on adjacent vertices. We then try to build a residence on vertex 20, "
                        + "        it fails because Blue does not own an edge adjacent to 20. After building a road on edge 22, building a residence on vertex 20 is successful."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor11.png\">"
                        + "    </div> "
                        + "    <p>As you can see from the new board that roads and houses are built by Blue has already been updated. "
                        + "        Since building a basement costs one brick, one glass, one wifi, one energy, and building a road costs one heat and one wifi, "
                        + "        Blue has used a total of one brick, one glass, three wifi, one energy and two heats (one basement, two roads built). "
                        + "        Observe that it is exactly what Blue lost has shown by the status command:</p>"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor12.png\">"
                        + "    </div> "
                        + "    </li>"

                        + "    <li>Command \"trade player loss gain\" where loss is the resource you are offering and gain is the resource you will obtain:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor13.png\">"
                        + "    </div> "
                        + "     </li>"

                        + "    <li>Command \"save file\" and commland line argument \"-load file\":"
                        + "    In the example below we can see that it's currently player Orange's turn and status of all players are also displayed."
                        + "     The game is saved in the file game1.txt:"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor14.png\">"
                        + "    </div> "
                        + "    Then we can resume the game using the command line argument \"-load saved-file\":"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor15.png\">"
                        + "    </div> "
                        + "     </li>"
                            
                        + "    <li>Check winners:"
                        + "    <p>Blue has 9 builder points at the start of the turn. Then Blue builds roads on edge 14 and 22 which allowed Blue to build a basement on vertex. "
                        + "        Since the builder gains 1 point for building a basement, Blue has 10 builder points now which mean Blue has won. Then the program asks the user if they want to play again. "
                        + "        The first picture below shows the situation when the user responds yes in which case the game restarts. The second pictures shows when the response is no so the program ends."
                        + "    </p>"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor16.png\">"
                        + "    </div> "
                        + "     </li>"
                        + "</ol>"],
            "implementation": "Due to university policies, this project cannot be made public. "
            + "However, if you are an employer who wants to see the actual implementation, please contact me for a deploy key to github."
        },
        "zh": {
            "content": ["滑铁卢大学CS246 期末项目。"
                        + "<br>"
                        + "<h3 style=\"margin-top: 20px;\">准备工作</h3>"
                        + "<hr>"
                        + "这个游戏在以下的棋盘上进行："
                        + "<br>"
                        + "<div id=\"ctor_hor\" style=\"display: flex\">"
                        + "    <img style=\"position: relative; width:400px;  height: 30%; \" src=\"/static/home/ctorBoard.png\">"
                        + "    <p style=\"padding: 3%;\">"
                        + "         每个棋盘上的小的长方形被称为一个\"瓦片\"。一个棋盘上有19个这样的\"瓦片\"。"
                        + "         在每个\"瓦片\"里有三个数值: \"瓦片\"的顺序号, 瓦片的能源, 以及瓦片数字-"
                        + "         其用来决定当投掷骰子时\"瓦片\"中的能源是否会被奖励出去。 (这三个值是按从上到下分布的)."
                        + "         <br style=\"margin-top: 10px;\"></br>"
                        + "         在每个\"瓦片\"的边与顶点上玩家可以可以建造路或房子。 "
                        + "         更具体来说每个\"瓦片\"有6个顶点（四个角和纵向边的中点）。它们被用括号括了起来。 "
                        + "         每个\"瓦片\"有6个边，它们用纯数字来表示。 "
                        + "    </p>"
                        + "</div>"
                        + "<p>"
                        + "    玩家在他的回合可以在顶点上建造房屋或在边上建造路。"
                        + "    每个房屋按照以下的顺序建造：地下室，别墅，塔。 每个必须从地下室开始建造，之后如果资源够多的话按照顺序升级。"

                        + "</p>"
                        + "<p>"
                        + "    这个游戏需要四个交替回合的玩家。在每个回合的起始，要投掷两个骰子。它们的和在2-12 之间。"
                        + "    如果有\"瓦片\"的瓦片数字与投掷的和相等，那么那么瓦片的资源将会奖励给所有在这个瓦片的顶点拥有房屋的玩家。"
                        + "</p>"

                        + "<h3 style=\"margin-top: 20px;\">鹅</h3>"
                        + "<hr>"
                        + "鹅在游戏开始时会在公园里休息。如果两个骰子的和为7, 这个回合的玩家可以移动鹅去棋盘上的任何\"瓦片\"。"
                        + "在这种情况下任何拥有大于等于10个资源的玩家会随机丢掉他们一半（向下舍入）的资源。"
                        + "另外，这个回合的玩家可以从鹅所在新\"瓦片\"顶点拥有房屋的玩家中选一个偷一个资源。"


                        + "<h3 style=\"margin-top: 20px;\">建造房屋/道路</h3>"
                        + "<hr>"
                        + "<p>"
                        + "    一共有五种资源：砖头，能量，玻璃，热力，无线网，和公园Brick, Energy, Glass, Heat, and Wifi. "
                        + "    以下是建造东西所需的资源:"
                        + "</p>"
                        + "<ol class=\"ul-style indent_list\">"
                        + "    <li>地下室: 1 砖头, 1 能量, 1 玻璃, 1 无线网</li>"
                        + "    <li>别墅: 2 玻璃, 3 热力</li>"
                        + "    <li>塔: 3 砖头, 2 能量, 2 玻璃, 1 无线网, 2 热力</li>"
                        + "    <li>道路: 1 热力, 1 无线网</li>"
                        + "</ol>"
                        + "关于玩家修建房屋与道路也有一些规定:"
                        + "<ol class=\"indent_list\">"
                        + "    <li>房屋不能修建于相邻已建房屋的顶点。</li>"
                        + "    <li>除了游戏开始阶段，房屋必须建在与这个玩家拥有道路相邻的顶点。</li>"
                        + "    <li>道路可以建在与这个玩家拥有道路或房屋相邻的边上。</li>"
                        + "    <li>在游戏开始时每个玩家可以在棋盘上随意建造两个地下室。</li>"
                        + "</ol>"
                        + "<h3 style=\"margin-top: 20px;\">怎样获胜?</h3>"
                        + "<hr>"
                        + "首先得到10个建造积分的玩家获胜。建造一个地下室可以得到1个建造积分，并且每个升级或额外获得1个建造积分。"
                        + "所以玩家需要建造更多的房屋来获胜。房屋不仅提供建造积分，它们同时会在投掷骰子时给予玩家更多的资源。"
                        + "<br>", 
            
                        "<ol>"
                        + "    <li>	准备工作:"
                        + "        当程序在没有command line argument下运行时, 程序会自从本目录(directory)中的layout.txt 来搭建棋盘: "
                        + "        <br>"
                        + "        你也可以用command line argument \"-board file\" 来搭建棋盘 (\"file\" 应该和 layout.txt有一样的格式)"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\" width:100%;\" src=\"/static/home/ctor1.png\">"
                        + "    </div>"
                        + "    <p>正如上图所示，layout.txt 包含38个数字，每对数字按其排列顺序决定棋盘上一个\"瓦片\"的状态 (第一个数字是\"瓦片\"能量，第二个是\"瓦片\"数字) </p>"
                        + "    <p>以上部分\"瓦片\"能量是由数字代表的：0代表\"砖头\", 1代表\"能量\", 2代表\"玻璃\", 4代表\"热力\", 4代表\"无线网\", 5代表\"公园\" </p>"
                        + "    <p>默认的layout.txt 会把棋盘设置成以下的状态:</p>"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"align-items: center; width:50%;  height: 30%;\" src=\"/static/home/ctorBoard.png\">"
                        + "    </div>"
                        + "    </li>"

                        + "    <li> 在游戏开始时，每个玩家会被要求在棋盘上任意建造两个地下室。你也可以看到如果一个顶点上已经建造了一个房屋，那么其他人就不能建造在这个顶点上了。"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor2.png\">"
                        + "    </div>"
                        + "    </li>"

                        + "    <li> 在每个玩家回合开始时，玩家会被询问投掷哪种骰子。"
                        + "        有以下两种选择：load dice 或 fair dice. Fair dice 在2-12中随机选取一个数字，而 load dice 会让玩家手动在2-12中输入一个数字:"
                        + "    "
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor3.png\">"
                        + "    </div>"
                        + "    \"status\" 命令会打出每个玩家拥有的分数和资源。当你输入用哪种骰子时，程序会自动选用最后一个输入的骰子。"
                        + "    这是一个示例:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor4.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li> “help”, “residences”, “improve” 命令和投掷 fair dice的展示:"
                        + "    \"help\" 命令会打出所有程序接受的命令。“residences” 命令会打出这个回合玩家拥有的所有房屋。"
                        + "    \"improve <residence>\" 命令给选定的房屋升级."
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor5.png\">"
                        + "    </div>"
                        + "     </li>"

                        + "    <li>	使用 “-random-board” command line argument 会随机设计成 3 个\"无线网\", 3个\"热力\", 4个\"砖头\", 4 个\"能量\", 4个 \"玻璃\", 和 1个\"公园\"。<br>"
                        + "    命令:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor6.png\">"
                        + "    </div>"
                        + "    棋盘:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor7.png\">"
                        + "    </div>"
                        + "    </li>"
                        + "    <li>当骰子投掷结果为3，我们观察到\"瓦片\" 0 是为一个\"瓦片\"数字为3的\"瓦片\"。所以所有在\"瓦片\"0的顶点上拥有房屋的放假都会获得一个\"砖头\"（\"瓦片\"0的资源）的奖励。"
                        + "        “status” 命令会显示每个玩家所拥有的资源和建造积分。你能看到蓝色玩家得到了2个\"砖头\"，橙色和黄色玩家各得到了一个\"砖头\"。 "
                        + "        从上面的棋盘我们可以看到蓝色玩家在\"瓦片\"0的顶点上拥有两个房屋，黄色和橙色玩家在\"瓦片\"0的顶点上各拥有一个房屋。"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor8.png\">"
                        + "    </div>   "
                        + "    </li>"

                        + "    <li>鹅的影响: "
                        + "    投掷骰子结果为7时每个玩家的状态："
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor9.png\">"
                        + "    </div>   "
                        + "    在下一个回合当投掷骰子的结果为7时，蓝色玩家丢掉了其拥有13资源中的6个。"
                        + "    红色玩家丢掉了其拥有12资源中的6个。之后鹅被移到了\"瓦片\"0。蓝色，橙色，和黄色玩家在\"瓦片\"0 的顶点上拥有房屋。 "
                        + "    所以红色玩家（这回合的玩家）可以在以上三个玩家（它们都有一个及以上资源）中选择一个随机偷取一个资源。正如我们看到的那样，最终红色玩家从蓝色玩家处偷去了一个\"砖头\"。"
                        + "    跟第一张图相比，蓝色玩家之前有5个\"砖头\"，之后被鹅和红色玩家各偷去了一个。"
                        + "    同时，红色玩家和之前相比做了一个\"砖头\"。"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor10.png\">"
                        + "    </div>  "
                        + "     </li>"


                        + "    <li>\"build-road\" 和\"build-res\"命令: 当我们在14修建道路时，因为蓝色玩家在与\"边14\"相邻的顶点拥有一个房屋，所以这次道路修建能够成功。"
                        + "        之后当我们试图在顶点14修建地下室时，尽管蓝色玩家拥有一个与顶点14相邻的道路，"
                        + "        但是建造失败了因为我们不能在与已建房屋相邻的顶点上建造新的房屋。我们之后试图在顶点20修建房屋， "
                        + "        由于蓝色玩家没有与顶点20相邻的道路所以失败了。在边22建造万道路后，我们就能成功在顶点20建造房屋了。"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor11.png\">"
                        + "    </div> "
                        + "    <p>正如新的棋盘所示，蓝色玩家所建的房屋和道路都已经在棋盘上更新了。"
                        + "        建造一个地下室需要一个\"砖头\"一个\"无线网\",一个\"能量\"。建造一条道路需要一个\"热力\"和一个\"无线网\"。 "
                        + "        蓝色玩家一共用了一个\"砖头\"， 一个\"玻璃，三个\"无线网\"，一个\"能量\"和两个\"热力\" （建造了一个地下室，两条道路）. "
                        + "        注意到者正是status命令打出结果中蓝色玩家丢失掉的资源数:</p>"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor12.png\">"
                        + "    </div> "
                        + "    </li>"

                        + "    <li>\"trade <player> <loss> <gain>\" 命令 （loss是玩家给出的资源，gain 是玩家会收到的资源:"
                        + "    <div style=\"text-align: center;\">"
                        + "        <img style=\"width: 50%;\" src=\"/static/home/ctor13.png\">"
                        + "    </div> "
                        + "     </li>"

                        + "    <li>\"save <file>\" 命令和命令行参数（commland line argument） \"-load file\":"
                        + "         在以下的例子中，你可以看到现在是橙色玩家的回合，每个玩家的状态也同样被展示了出来。"
                        + "         这个游戏状态被存在game1.txt里:"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor14.png\">"
                        + "    </div> "
                        + "    之后我们可以重启之前的游戏通过命令行参数（ command line argument） \"-load saved-file\":"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor15.png\">"
                        + "    </div> "
                        + "     </li>"
                            
                        + "    <li>检测胜者:"
                        + "    <p>蓝色玩家在回合开始时有9个建造积分。之后蓝色玩家在边14和边22建造了道路，这使得其可以在顶点20建造一个地下室。"
                        + "        由于玩家能通过建造地下室获得一个建造积分，蓝色玩家现在有10个建造积分了了。这意味着蓝色玩家获胜了。之后程序会问用户是否愿意重新开始一局游戏。"
                        + "        下面的第一个图用户回复\"yes\"的情况 - 游戏重启。第二张图展示了回复为\"no\"的情况 - 游戏结束。"
                        + "    </p>"
                        + "    <div style='text-align: center;'>"
                        + "        <img style='width: 50%;' src=\"/static/home/ctor16.png\">"
                        + "    </div> "
                        + "     </li>"
                        + "</ol>"],
            "implementation": "由于大学规定，这个项目不能公开。然而，如果你是一名雇主并想看实际的编码，请联系我获取一个GitHub的密钥。"
        },
        "img": "/static/home/ctor.jpeg"
    },
    "fitness": {
        "en": {
            "content": ["Fitness App Built using Android Studio. Help users manage their nutrition and fitness information. "
            + "Able to request food's nutritious information from an online database through API and store them locally.", 
            
            "<ol>"
            + "     <li>Login page: when you open the app for the first time, you will see the login page below on the left:"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness1.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness2.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness3.png\">"
            + "         </div> "
            + "         <p>Since we don't have an account yet, click the register button to register a new user.<br>"
            + "            The username \"richard\" has already been used so we add 2021 to the end of the username. <br>"
            + "            After registering, the app will automatically lead you back to the login page. Enter the username and password and then click login."
            + "         </p>"
            + "     </li>"
            + "     <li>Home page: the user will see that page on the left below when they first loged in:"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness4.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness5.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness6.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness7.png\">"
            + "         </div> "
            + "         <p>As a default, a list of common foods have been already added locally. Then the user can search any food they want and click \"request from online database\" <br>."
            + "            If the food does exists in the online database, an message like the image above in the middle will be shown with the food's nutrition information. <br>"
            + "            You can choose to add it to your local database. Then you will see it in your lists of food (image above on the right). Clicking on a food will lead you to a page like the one shown on the right above."
            + "         </p>"
            + "         The same request and add procedure can also be applied for fitness activities:"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-2\" src=\"/static/home/fitness8.png\">"
            + "             <img class=\"horizontal-2\" src=\"/static/home/fitness9.png\">"
            + "         </div> "
            + "         <p>Note that you can also manually add food information by clicing the button at the bottom.</p>"
            + "     </li>"
            + "     <li>Fitness page: the user can navigate to the fitness page through the navigation bar on the bottom."
            + "         <p>Click on the button on the bottom to add a fitness event for a day (shown below on the left). <br>"
            + "             Pick a date and click OK to add it to the list of fitness activities (shown below in the middle). <br>"
            + "             Clicking on that the fitness event will lead you to the page shown below on the right."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness10.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness11.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness12.png\">"
            + "         </div> "
            + "         <p>Inside each fitness activity, you add click on the button \"Add\" to add a fitness activity that you have done in the day. (shown below on the left). <br>"
            + "            You can click on the drop down list to search for a fitness activity that is currently stored in the local database. (shown below in the middle).<br>"
            + "            After selecting the fitness activity, enter the duration and then click \"save\". Then you will see the fitness acitivity appearing in the list of fitness activities you have done for the day. (shown below on the right)."
            + "         </p>"
            + "         The same request and add procedure can also be applied for nutrition event:"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness13.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness14.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness15.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness16.png\">"
            + "         </div> "
            + "     </li>"
            + "     <li>Nutrition page: the user can navigate to the nutrition page through the navigation bar on the bottom."
            + "         <p>You can add a nutrition recorder for a day just like what we've done for adding fitness event. <br>" 
            + "             Clicking on that the nutrition event will lead you to the page shown below on the left."
            + "         </p>"
            + "         <p>Click on the button \"Add\" to add a food that you have eaten in the day. (shown below in the middle). <br>"
            + "            Search for a food that is currently stored in the local database. (shown below in the middle).<br>"
            + "            After selecting the food, enter the mass and then click \"save\". Then you will see the food appearing in the list of food you have eaten for the day. (shown below on the right)."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness17.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness18.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness19.png\">"
            + "             <img class=\"horizontal-4\" src=\"/static/home/fitness20.png\">"
            + "         </div> "
            + "         <p>Another feature I want to mention is the search bar on the top. <br>"
            + "             When we are on the food section of the home page, you can search a kind of food through the top search bar. (shown below in the middle)<br>"
            + "             You can do the same thing for the fitness section of the home page. "
            + "             Note that there are five sections of fitness activities so that you can only search for a fitness activity that is the section you are currently on. <br>"
            + "             Clicking the three-dot symbol on the top right corner will display the logout button. Clicking on it will lead you to the login page. (shown below on the right)"
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness21.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness22.png\">"
            + "             <img class=\"horizontal-3\" src=\"/static/home/fitness23.png\">"
            + "         </div> "
            + "     </li>"
            + "</ol>"],
            "implementation": "See <a href='https://github.com/Richard5678/fitness-app'>github</a> for details."
        },
        "zh": {
            "content": ["用Android Studio开发的健身软件。帮助用户管理营养,健身信息。能够从一个网上数据库通过API获取食物营养信息并存在本地数据库。", 
                        "<ol>"
                        + "     <li>登陆页: 当你第一次打开APP时，你回看到左下所示的登陆页面："
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness1.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness2.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness3.png\">"
                        + "         </div> "
                        + "         <p>由于你还没有一个账号，点击register键来注册一个新账户.<br>"
                        + "            用户名\"richard\"已经被占用了，所以我们在它之后加上2021。 <br>"
                        + "            注册完成后，系统会自动切换到登陆界面。输入用户名密码之后点击\"登陆\"。"
                        + "         </p>"
                        + "     </li>"
                        + "     <li>主页面: 用户第一个登陆后会看到左下的界面:"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness4.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness5.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness6.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness7.png\">"
                        + "         </div> "
                        + "         <p>在默认情况下，一列常见的食物已经存储到了本地。之后用户可以搜索任何想要的食物并且点击 \"request from online database\"。 <br>."
                        + "            如果输入的食物在线上数据库中存在, 一个包含该种食物信息的信息框会展示出来（像上图中间靠左）。<br>"
                        + "            你可以选择将其加入本地数据库。之后你会在你的食物列表中看到它 (上图中间靠右). 点击一个食物会带你到像右上图那样的界面。"
                        + "         </p>"
                        + "         同样的\"搜索\", \"添加\"模式对于\"fitness activities\" 同样适用:"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-2\" src=\"/static/home/fitness8.png\">"
                        + "             <img class=\"horizontal-2\" src=\"/static/home/fitness9.png\">"
                        + "         </div> "
                        + "         <p>同时你也可以通过点击屏幕下方的\"+\"键来手动添加食物到本地数据库。</p>"
                        + "     </li>"
                        + "     <li>健身（fitness）界面: 用户可以通过底部的导航栏切换到健身界面(fitness page)。"
                        + "         <p>点击下方的\"+\"键来添加一个一天的健身活动 (见左下图). <br>"
                        + "             选择一个日期之后点击\"OK\"来添加到健身活动列表里。 (见下图-中). <br>"
                        + "             点击健身活动会带你到右下图的界面。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness10.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness11.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness12.png\">"
                        + "         </div> "
                        + "         <p>在每个健身活动里, 你可以点击\"Add\"键来添加今天完成的活动(见左下图). <br>"
                        + "            你可以点击下拉列表来搜寻存储与本地数据库中的健身活动。 (见下图-中左).<br>"
                        + "            选择完健身活动后，输入活动市场之后点击\"save\". 之后你会在活动列表里看到刚刚添加的今天完成的健身活动 (见右下图)。"
                        + "         </p>"
                        + "         同样的\"搜索\", \"添加\"模式对于\"nutrition event\" 同样适用:"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness13.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness14.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness15.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness16.png\">"
                        + "         </div> "
                        + "     </li>"
                        + "     <li>营养(Nutrition)界面: 用户可以通过底部的导航栏切换到营养界面。"
                        + "         <p>你可以通过底部的\"+\"键来添加一天的营养记录器（和添加健身记录器一样的过程）。 <br>" 
                        + "             点击营养记录器会带你到左下图的界面。"
                        + "         </p>"
                        + "         <p>点击\"Add\"键来添加一个今天吃的食物。 "
                        + "            搜索存储与本地数据库中的食物。(见下图-中右)<br>"
                        + "            选择完食物后，输入重量之后点击\"save\". 之后你可以在食物列表里看到刚刚添加的今天吃的食物。(见右下图)."
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness17.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness18.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness19.png\">"
                        + "             <img class=\"horizontal-4\" src=\"/static/home/fitness20.png\">"
                        + "         </div> "
                        + "         <p>另一个我想谈谈的特点是是顶部的搜索栏。 <br>"
                        + "             当我们在主页面的食物(food)分区时, 你可以通过顶端的搜索栏来搜索任何本地数据库中的食物。 (见下图-中)<br>"
                        + "             你可以在主页面的健身(fitness)分区做同样的操作。"
                        + "             需要注意的是健身分区里还包含五个小分区。当搜索健身活动时，搜获只会在目前显示的小分区上进行。<br>"
                        + "             点击右上的三个点图标会使\"logout\"键出现。点击其会推出当前账户并切换到登陆页。(见右下图)。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness21.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness22.png\">"
                        + "             <img class=\"horizontal-3\" src=\"/static/home/fitness23.png\">"
                        + "         </div> "
                        + "     </li>"
                        + "</ol>"],
            "implementation": "详情见<a href='https://github.com/Richard5678/fitness-app'>github</a>。"
        },
        "img": "/static/home/fitness.png"
    },
    "gameOfLife": {
        "en": {
            "content": ["A simulator between the states 'death' and 'life' based on certain rules. <br>"
            + "Let us take a look at how the program is ran: <br>"
            + "The program takes two command line arguments and executed as \"./gameOfLife width height\" where width and height determines the dimension of the board"
            + "There are a set of rules we can apply to cells on the board: (Each cell has at most 8 neighbours: all cells around it)"
            + "<ol>" 
            + "    <li>This is an universal rule that applies to all cells automatically: Cell with 3 live neighbours becomes live, unless another rule says otherwise.</li>"
            + "    <li>Cell with less than 2 live neighbours dies. (Command: \"l x y\")</li>"
            + "    <li>Cell with more than 3 live neighbours dies. (Command: \"a x y\")</li>"
            + "    <li>Period rule: takes an argument N which flipped the state of the cell after N generations. (Command: \" t x y N\")</li>"
            + "    <li>Friend rule: takes an argument N which makes the cell live if it has N live neighbours. (Command: \"f x y N\")</li>"
            + "</ol>"
            + "There are also other commands \"p\" which prints the board, \"q\" which quits the game and \"o x y\" which turns the cell at (x, y) on. <br>"
            + "There is a special command \"d\" which is followed by any number of any of the four rules above until a character other than l,a,t,f are read in."
            + "Then the program will set all the cells to dead and apply all those rules ,in that order, to all the cells on the board. See the demo below for examples. <br>" 
            + "Command \"d\" is mostly used for testing since it introduces a whole new level of complexity into the program."
            + "The Decorator Design pattern is used in this project to implement all rules in orders", 

            "<ol>"
            + "     <li>Initialize board and command \"p\", \"o\", \"u\""
            + "         We have initialized a 5 by 5 board and then cell at (1,3), (3, 1), (2,2) are turned on. Command \"u\" updates all cells to the next generation."
            + "         Since rule 1 is applied to all cells automatically and cell at (2, 2) has exactly 3 live neighbours, then it's turned on."
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife1.png\">"
            + "         </div>"
            + "     </li>"
            + "     <li>Rule 2 (Command: \"l x y\"):"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife2.png\">"
            + "         </div>"
            + "     </li>"
            + "     <li>Rule 3 (Command: \"a x y\"):"
            + "         <p>"
            + "         On the board below, the cell at (2,1) has more than three neighbours to it will die in the next generation based on rule 3."
            + "         Note that rule 1 is always applied first since it takes the least priority when there are confliting rules applied. "
            + "         So the cells at (1, 0), (3, 0), (1, 2), (3, 2) have exactly 3 live neighbours and are turned on based on rule 1."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife3.png\">"
            + "         </div>"
            + "     </li>"
            + "     <li>Rule 4 (Command: \"t x y N\"):"
            + "         <p>"
            + "         In the example below we have set N = 2 which means the cell at (3,3) flips its state every two generations:"
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife4.png\">"
            + "         </div>"
            + "         </li>"
            + "     <li>Rule 5 (Command: \"f x y N\"):"
            + "         <p>"
            + "         The first command \"f 2 2 0\" turns the cell at (2, 2) on since it has exactly 0 neighbours."
            + "         \"f 3 2 1\" and \"f 3 1 2\" turns cells at (3,2), (3, 1) on accordingly."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife5.png\">"
            + "         </div>"
            + "     </li>"
            + "     <li>(Command: \"d\"):"
            + "         <p>"
            + "         Command \"df0-\" applies \"f\" with N = 0 to all cells on the board. "
            + "         Since all cells have 0 friends so all of them will be turned on in the next generation."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife6.png\">"
            + "         </div>"
            + "         <p>"
            + "         Command \"df0-\" applies \"t\" with N = 2 to all cells on the board. "
            + "         In the next generation, a few cells are turned on due to Rule One. "
            + "         In the generation after that, the periodic rule (Rule Four) is triggered and hence all the cells flip states."
            + "         </p>"
            + "         <div style=\"text-align: center; \">"
            + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife7.png\">"
            + "         </div>"
            + "     </li>"
            + "</ol>"],
            "implementation": "Due to university policies, this project cannot be made public. "
            + "However, if you are an employer who wants to see the actual implementation, please contact me for a deploy key to github."
        },
        "zh": {
            "content": ["一个根据规则在'生'，'死'状态中切换的模拟器。<br>"
                        + "让我们来看看程序是怎么运行的: <br>"
                        + "程序在启动时会接受两个命令行参数（command line arguments）：\"./gameOfLife width height\" - width和height 是棋盘的宽和长。"
                        + "对于棋盘上每个细胞，我们可以对他们运用以下的规则: (每个细胞最多有8个邻居: 所有相邻的细胞)"
                        + "<ol>" 
                        + "    <li>这是个普遍规则 - 自动应用于每个细胞: 有三个活细胞邻居的细胞会变为活细胞，除非另一个规则说相反的。</li>"
                        + "    <li>少于2个活细胞邻居的细胞会变成死细胞。 (命令: \"l x y\")</li>"
                        + "    <li>多于3个活细胞邻居的细胞会变成死细胞。 (命令: \"a x y\")</li>"
                        + "    <li>循环规则: 接受一个数字 N，每N代调换细胞的状态（活变死 或 死变活）。 (命令: \" t x y N\")</li>"
                        + "    <li>朋友规则: 接受一个数字 N，当细胞有N个活细胞邻居时，他会变成活细胞。 (命令: \"f x y N\")</li>"
                        + "</ol>"
                        + "还有其他命令：\"p\" 打印出整个棋盘, \"q\" 退出游戏和\"o x y\" 是在坐标(x,y)的细胞变成活细胞。 <br>"
                        + "命令 \"d\" 之后可以跟随任意数量的以上任意一种规则直到 l,a,t,f以外的东西被读入。"
                        + "之后程序会把所有细胞变为死细胞之后按顺序使用规则。见以下\"展示\"里的例子。 <br>" 
                        + "\"d\" 命令大多用于测试。它使程序的复杂程度升到了另一个等级。"
                        + "这个项目使用了装饰器模式来按顺序使用以上规则。", 

                        "<ol>"
                        + "     <li>设置棋盘的命令\"p\", \"o\", \"u\""
                        + "         我们设置了一个5 乘 5的棋盘，之后使在坐标 (1,3), (3, 1), (2,2) 的细胞变成活细胞。命令 \"u\" 把每个细胞都更新到下一代。"
                        + "         由于第一个规则使自动应用的，并且坐标在(2, 2)的细胞有3个活细胞邻居，所以它会变成活细胞。"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife1.png\">"
                        + "         </div>"
                        + "     </li>"
                        + "     <li>第二个规则 (命令: \"l x y\"):"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife2.png\">"
                        + "         </div>"
                        + "     </li>"
                        + "     <li>第三个规则 (命令: \"a x y\"):"
                        + "         <p>"
                        + "         在以下的棋盘上，坐标在(2,1)的细胞有超过三个活细胞邻居所以他会在下一代变成死细胞（根据第三个规则）。"
                        + "         第一个规则总是第一个被应用因为它在优先顺序中排在最后。 "
                        + "         所以坐标在 (1, 0), (3, 0), (1, 2), (3, 2)的细胞 都有3个活细胞邻居。根据第一条规则，它们在下一代会变成活细胞。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife3.png\">"
                        + "         </div>"
                        + "     </li>"
                        + "     <li>第四个规则 (命令): \"t x y N\"):"
                        + "         <p>"
                        + "         在下面的例子中我们让 N = 2。这意味着坐标在 (3,3) 的细胞会每两代调换死活状态："
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife4.png\">"
                        + "         </div>"
                        + "         </li>"
                        + "     <li>第五个规则 (命令): \"f x y N\"):"
                        + "         <p>"
                        + "         第一个命令\"f 2 2 0\" 使坐标在（2，2）的细胞变成活细胞因为它有0个活细胞邻居。"
                        + "         \"f 3 2 1\" and \"f 3 1 2\" 分别使坐标在(3,2), (3, 1)细胞变成活细胞。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife5.png\">"
                        + "         </div>"
                        + "     </li>"
                        + "     <li>(命令: \"d\"):"
                        + "         <p>"
                        + "         命令 \"df0-\" 会向棋盘上的每个细胞应用命令 \"f\" （ N = 0）。 "
                        + "         由于每个棋盘上的细胞都有0个活细胞邻居，所以它们下一代都会变成活细胞。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife6.png\">"
                        + "         </div>"
                        + "         <p>"
                        + "         命令 \"df0-\" 向棋盘上每个细胞应用命令 \"t\" （N = 2）。 "
                        + "         在下一代，有一些细胞由于第一个规则变成了活细胞。"
                        + "         再下一代，循环规则 (第四个规则) 被触发了。这意味着所有的细胞都调换了生死状态。"
                        + "         </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width: 50%;\" src=\"/static/home/gameOfLife7.png\">"
                        + "         </div>"
                        + "     </li>"
                        + "</ol>"],
            "implementation": "由于大学规定，这个项目不能公开。然而，如果你是一名雇主并想看实际的编码，请联系我获取一个GitHub的密钥。"
        },
        "img": "/static/home/gameOfLife.png"
    },
    "testing": {
        "en": {
            "content": ["This projects contains a pair of testing tools written in bash script. One of them is called ‘produceOutputs’ which produce the correct output of tests given the correct implentations. "
            + "The second one is named ‘runSuite’ which compares the output of the written program "
            + "using test cases in the given test suite with the expected output generated by ‘produceOutput’. "
            + "<br>"
            + "Their usage can be formally defined as:"
            + "<br>"
            + "<div style='margin-left: 20%;'>./produceOutputs  testSuite.txt  ./correctImplmentation</div>"
            + "<div style='margin-left: 20%;'>./runSuite  testSuite.txt  ./ourImplmentation</div>"
            
            + "where ourImplmentation and correctImplmentation are executables and testSuite.txt is a text file containg the name of all the test cases."
        
            + "<br>"
            + "<p>Also note that a program can take both command line arguments as well as inputs from stdin."
            +    "So our testing tool will go through the directory and search for the .in and .args files with the corresponding name in the testSuite.txt file "
            +    "and run the given program with them. If none of the two files exists, then the program is ran with no inputs.</p>"
            
            + "If the .in or .args files of the specified name in testSuite.txt is not readble, errors will be reported and move on to the next test.", 

            "Let us take a look at a simple example: "
            + "<br>"
            + "Here is a program that computes the sum of integers from std in and command line arguments seperately. "
            + "The correct implementation is given by addCorrect.cc:"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing1.png\">"
            + "</div>"
            + "We also have two implementations that contain bugs:"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing2.png\">"
            + "</div>"
            + "They are compiled as follows:"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing3.png\">"
            + "</div>"
            + "Inside of directory, we have three test cases: test1 to test3:"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing4.png\">"
            + "</div>"
            + "Each of them contains a .in and .args file. You can also see that the names of those tests are listed in the testSuite.txt file."
            + "Let us see how to use our testing tools: we will start by producing expected outputs using \"correctImplementation\" and \"produceOutputs\":"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing5.png\">"
            + "</div>"
            + "Now you can see the corresponding .out files have been produced in the current directory. <br>"
            + "Then let's test other implementations using \"runSuite\":"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing6.png\">"
            + "</div>"
            + "You can see that runSuite reported information of all test cases that the given implementation does not pass. <br>"
            + "If we test our correct implementation, we get nothing which means the given implementation has passed all the tests in testSuite.txt:"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/testing7.png\">"
            + "</div>"],
            "implementation": "Due to university policies, this project cannot be made public. "
            + "However, if you are an employer who wants to see the actual implementation, please contact me for a deploy key to github."
        },
        "zh": {
            "content": ["这个项目包含一对用Bash脚本写的测试工具。其中一个叫‘produceOutputs’ - 其会根据正确的程序产出所写测试题目的正确输出。"
                        + "第二个名叫‘runSuite’ - 其会比较所写测试题目输入所写程序的出入和之前由‘produceOutput’产出的正确输出。"
                        + "<br>"
                        + "它们的用法可以正式定义为:"
                        + "<br>"
                        + "<div style='margin-left: 20%;'>./produceOutputs  testSuite.txt  ./correctImplmentation</div>"
                        + "<div style='margin-left: 20%;'>./runSuite  testSuite.txt  ./ourImplmentation</div>"
                        
                        + "ourImplmentation 和 correctImplmentation 是可执行文件，testSuite.txt 是一个包含所有测试题目名字的文件。"
                    
                        + "<br>"
                        + "<p>另外要注意的是一个程序可以同时接受命令行参数(command line arguments)和stdin的输入."
                        +    "所以我们的测试软件会在目录里搜寻textSuite.txt 里名字对应的.in 和 .args 文件，"
                        +    "之后用他们作为输入来运行程序。如果两个文件都不存在，那么程序将会在没有任何输入的状态下运行。</p>"
                        
                        + "如果testSuite.txt里名字对应的 .in 或 .args 文件不能被读取, 程序会报出错我并跳到下一个测试题目。", 

                        "让我们来看看一个简单的例子: "
                        + "<br>"
                        + "这是一个分别计算std in输入和命令行参数（command line arguments）和的程序。 "
                        + "正确的软件实现为\"addCorrect.cc\":"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing1.png\">"
                        + "</div>"
                        + "我们还有两个有问题的软件实现:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing2.png\">"
                        + "</div>"
                        + "它们被编译为以下的可执行文件:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing3.png\">"
                        + "</div>"
                        + "在这个目录（directory）里，我们有三个测试题目: test1 到 test3:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing4.png\">"
                        + "</div>"
                        + "每个测试题目都包括.in 和 .args 文件. 你也可以看到测试题目的名字被列在了testSuite.txt 文件里。"
                        + "让我们看看如何使用这些测试软件: 我们开始会用\"correctImplementation\" 和 \"produceOutputs\"来产出正确的输出:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing5.png\">"
                        + "</div>"
                        + "现在你可以看到对应的 .out 文件已经出现在了现在的目录（directory）里。 <br>"
                        + "之后我们用\"runSuite\"来测试我们的程序:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing6.png\">"
                        + "</div>"
                        + "你可以看到 runSuite 报出了所有我们的程序没有通过的测试题的信息。<br>"
                        + "如果我们测试正确的程序，我们不会看到任何产出，说明我们通过了 testSuite.txt里所有的测试题:"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/testing7.png\">"
                        + "</div>"],
            "implementation": "由于大学规定，这个项目不能公开。然而，如果你是一名雇主并想看实际的编码，请联系我获取一个GitHub的密钥。"
        },
        "img": "/static/home/testing.jpeg"
    },
    "classifier": {
        "en": {
            "content": ["This project classifies creatures based on their structure which is given in a form of undirected and unweighted graph. "
                        + "<p>There are 5 basic commands:</p>"
                        + "<ol>"
                        + "     <li>n \"type\": creates a node of type \"head\", \"torso\", \"tail\", \"leg\", \"arm\", \"pelvis\", \"shoulders\". </li>"
                        + "     <li>c \"node1\" \"node2\": connects \"node1\" and \"node2\" </li>"
                        + "     <li>d \"node1\" \"node2\": disconnects \"node1\" and \"node2\"</li>"
                        + "     <li>p: classifier the current structure</li>"
                        + "     <li>e: erases the current structure</li>"
                        + "</ol>"
                        + "<p>Note that when a node is created, it is given a number which represents the node (printed to stdout)."
                        + "Both command \"c\" and \"d\" uses the number representing the node. (See demo for detials)</p>"
                        + "Structures are named as <head description> <limbs description> where a limb is a arm, leg or wing."
                        + "<ol>"
                        + "     <li>Head despcription: \"headless\" for 0 heads, \"\" for 1 head, and \"n-headed\" for n heads (n > 1) </li>"
                        + "     <li>Limbs description: \"snake\": 0 limbs, \"pogo\": 1 limb, \"biped\": 2 limbs, \"tripod\": 3 limbs,"
                        + "         \"quadruped\": 4 limbs, \"pentapod\": 5 limbs, \"insect\": 6 limbs, \"heptapod\": 7 limbs,"
                        + "         \"arachnid\": 8 limbs, \"myriapod\": >= 9 limbs"
                        + "         <p>There are two special cases: 1. if the strcture has 4 limbs (2 legs and no wings), then it is a \"humanoid\""
                        + "         If the structure has 4 limbs with 2 distinct wings, then it is called \"bird\"."
                        + "         </p>"
                        + "     </li>"
                        + "     <li>Trunk: defined as any number of torso, pelvis, tail and shoulders connected to together. "
                        + "         If the structure does not have a trunk, the output of \"p\" should be \"There creature has no trunk!\""
                        + "         If the structure have more than one trunk, then the output of \"p\" should be \"You creature is a chimera.\""
                        + "     </li>"
                        + "</ol>",

                        "<ol>"
                        + "     <li>"
                        + "         \"Here is an example:\""
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier1.png\">"
                        + "         </div>"
                        + "         <p>The creature looks something like this on a graph:</p>"
                        + "         <div style=\"text-align: center;\">"
                        + "             <img style=\"width:40%;\" src=\"/static/home/classifier2.png\">"
                        + "         </div>"
                        + "         <p>We can see that the structure above has one trunk and two distinct head connected to it. Since it has no limbs, so it is a snake. "
                        + "         The name of the structure would then be a 2-headed snake.</p>"
                        + "     </li>"
                        + "     <li>"
                        + "         <p>Here is another example:</p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier3.png\">"
                        + "         </div>"
                        + "         <p>The graph representation of structure above is given below: </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier4.png\">"
                        + "         </div>"
                        + "         <p>We can see that this structure has one head and 4 distinct limbs connected to the trunk. So it is named a \"quadruped\".</p>"
                        + "     </li>"
                        + "</ol>"
            ],
            "implementation": "Due to university policies, this project cannot be made public. "
            + "However, if you are an employer who wants to see the actual implementation, please contact me for a deploy key to github."
        },
        "zh": {
            "content": ["这个项目根据生物的结构（以一种无配重，无方向的图给出）来将其分类。"
                        + "<p>一共有5个基础命令:</p>"
                        + "<ol>"
                        + "     <li>n \"type\": 创建种类为 \"头(head)\", \"躯干（torso）\", \"尾巴（tail）\", \"腿（leg）\", \"手臂（arm）\", \"骨盆（pelvis）\", \"肩膀（shoulders）\"的节点。 </li>"
                        + "     <li>c \"node1\" \"node2\": 连接 \"node1\" 和 \"node2\"。 </li>"
                        + "     <li>d \"node1\" \"node2\": 断开 \"node1\" 和 \"node2\"的连接。</li>"
                        + "     <li>p: 判别现有结构的种类。</li>"
                        + "     <li>e: 抹去现有的结构。</li>"
                        + "</ol>"
                        + "<p>注意当一个节点被创立时, 其会被指定一个数字 (输出到 stdout)。"
                        + "\"c\" 和 \"d\"命令都用数字来代表节点。 (详情见\"展示\")</p>"
                        + "结构根据以下结构来命名：\"<头(head)的描述> <四肢(limbs)描述>\" 四肢(limbs)为手臂(arm), 腿(leg) 或 翅膀（wing)."
                        + "<ol>"
                        + "     <li>头的描述: 当有0个头时：\"headless\" , 1个头时：\"\", n个头时： \"n-headed\" (n > 1) </li>"
                        + "     <li>四肢描述: 当有0个四肢时：\"snake\": , 1个四肢时：\"pogo\"，2个四肢时：\"biped\"，3个四肢时：\"tripod\"，"
                        + "         4个四肢时：\"quadruped\"，5个四肢时： \"pentapod\"，6个四肢时： \"insect\"，7个四肢时： \"heptapod\"，"
                        + "         8个四肢时：\"arachnid\"，>=9个四肢时： \"myriapod\"。"
                        + "         <p>有两个特殊情况：1. 如果生物有4个四肢 (2条腿并且没有翅膀), 那么它就是个\"humanoid\"。"
                        + "         如果生物有四个四肢包括两个独立的翅膀，那么它被称为\"bird\"。"
                        + "         </p>"
                        + "     </li>"
                        + "     <li>身躯（Trunk）: 定义为任何数量的\"躯干（torso）\"，\"骨盆（pelvis）\"，\"尾巴（tail）\"，\"肩膀（shoulders）\"连接在一起。"
                        + "         如果生物结构没有一个身躯, 那么\"p\" 命令的输出应为：\"There creature has no trunk!\"，"
                        + "         如果生物结构有超过一个身躯， 那么\"p\" 命令的输出应为：\"You creature is a chimera.\"。"
                        + "     </li>"
                        + "</ol>",

                        "<ol>"
                        + "     <li>"
                        + "         这是个例子："
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier1.png\">"
                        + "         </div>"
                        + "         <p>以上生物在图上看像下图的样子:</p>"
                        + "         <div style=\"text-align: center;\">"
                        + "             <img style=\"width:40%;\" src=\"/static/home/classifier2.png\">"
                        + "         </div>"
                        + "         <p>我们可以看到以上的结构有一个身躯及两个独立的头连接在身躯上。因为它没有四肢，所以它的四肢描述为\"snake\"。 "
                        + "         那么以上生物的名字是\"2-headed snake\".</p>"
                        + "     </li>"
                        + "     <li>"
                        + "         <p>以下是另一个例子:</p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier3.png\">"
                        + "         </div>"
                        + "         <p>图上表示以上的结构为: </p>"
                        + "         <div style=\"text-align: center; \">"
                        + "             <img style=\"width:60%;\"src=\"/static/home/classifier4.png\">"
                        + "         </div>"
                        + "         <p>我们可以看到这个结构有一个头和四个独立连接在身躯上的四肢，所以我们称它为：\"quadruped\"。</p>"
                        + "     </li>"
                        + "</ol>"],
            "implementation": "由于大学规定，这个项目不能公开。然而，如果你是一名雇主并想看实际的编码，请联系我获取一个GitHub的密钥。"
        },
        "img": "/static/home/classifier.png"
    },
    "algo": {
        "en": {
            "content": ["This is not technically a project like the onces before. I just want to share some of the algorithm problems I did on leetcode and my thinking process.", 
            
            "Each folder of the git repository is a question. <br>"
            + "Inside each folder, there are typically three things:"
            + "<ol>"
            + "     <li>question.txt: description of the question</li>"
            + "     <li>explanation.txt: my thinking process</li>"
            + "     <li>solution file: my solution written in c++</li>"
            + "</ol>"
            + "Here is an example: the folder for \"cycles in linked list\""
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/algo1.png\">"
            + "</div>"
            + "<p>Both \"question.txt\" and \"explanation.txt\" files are in the folder.</p>"
            + "<p>Inside the \"question.txt\", the solution files are specified. This question also contains an extension and the solution file for that is also specified:</p>"
            + "<div style=\"text-align: center\">"
            +       "<img src=\"/static/home/algo2.png\">"
            + "</div>"],
            "implementation": "See <a href='https://github.com/Richard5678/leetcode'>github</a> for details."
        },
        "zh": {
            "content": ["这个项目严格来讲并不是像之前那几个一样的项目。我想分享一些我做的算法题和我做题时的思考过程。", 
                        "git储存库里的每个文件夹是一道算法题。 <br>"
                        + "在每个文件夹里通常有三种东西:"
                        + "<ol>"
                        + "     <li>question.txt: 题目的描述</li>"
                        + "     <li>explanation.txt: 我的做题思路</li>"
                        + "     <li>我的答案: 我用C++编写的答案</li>"
                        + "</ol>"
                        + "以下是一个例子: \"链表中的循环（cycles in linked list）\"的文件夹"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/algo1.png\">"
                        + "</div>"
                        + "<p>\"question.txt\" 和 \"explanation.txt\"都包含在了这个文件夹里。</p>"
                        + "<p>在\"question.txt\"里包含了我的答案的文件名。这个问题同时包括了一个延展问题，其答案也被包含其中:</p>"
                        + "<div style=\"text-align: center\">"
                        +       "<img src=\"/static/home/algo2.png\">"
                        + "</div>"],
            "implementation": "详情见<a href='https://github.com/Richard5678/leetcode'>github</a>。"
        },
        "img": "/static/home/algo.jpeg"
    }, 
    "ml": {
        "en": {
            "content": ["Here is a list of ML algorithms I have implemented:"
                        + "<ul>"
                        + "     <li>Linear Regression: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/housing%20-%20linReg.ipynb\">github</a></li>"
                        + "     <li>Logistic Regression: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20logReg.ipynb\">github</a></li>"
                        + "     <li>Random Forest: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20random%20forest.ipynb\">github</a> <a href=\"{% url 'blog' lang %}\">blog</a></li>"
                        + "     <li>Gradient Boosting Tree: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20gradient%20boosted%20tree.ipynb\">github</a> <a href=\"\">blog</a></li>"
                        + "</ul>"],
            "implementation": ["See <a href=\"\">github</a> for details"]
        }, 
        "zh": {
            "content": ["以下我用软件实现了的机器学习算法:"
            + "<ul>"
            + "     <li>线性回归: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/housing%20-%20linReg.ipynb\">github</a></li>"
            + "     <li>罗辑回归: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20logReg.ipynb\">github</a></li>"
            + "     <li>随机森林: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20random%20forest.ipynb\">github</a> <a href=\"\">blog</a></li>"
            + "     <li>梯度提升树: <a href=\"https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20gradient%20boosted%20tree.ipynb\">github</a> <a href=\"\">blog</a></li>"
            + "</ul>"],
            "implementation": ["详情见<a href=\"\">github</a>"]
        }
    }
}